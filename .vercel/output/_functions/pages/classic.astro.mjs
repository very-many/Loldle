import { c as createComponent, d as createAstro, a as renderTemplate, i as defineScriptVars, e as renderScript, m as maybeRenderHead, r as renderComponent } from '../chunks/astro/server_T7v3i2NQ.mjs';
import 'kleur/colors';
import { t as translatorById, a as translatorByName, C as Champions, $ as $$MainContainer } from '../chunks/mainContainer_DiJ12OjX.mjs';
import 'clsx';
/* empty css                                   */
import { $ as $$Layout } from '../chunks/Layout_8Nmuok8f.mjs';
export { r as renderers } from '../chunks/internal_BsTt5pTQ.mjs';

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$1 = createAstro();
const $$ChampSelect = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$ChampSelect;
  const { champions, mode } = Astro2.props;
  let lolol = champions.data;
  const resetTime = champions.expiration;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["", '<form autocomplete="off" data-astro-cid-dq2priuy> <div class="autocomplete" style="width:300px;" data-astro-cid-dq2priuy> <input id="myInput" type="text" name="Champion" placeholder="Champion Name" data-astro-cid-dq2priuy> </div> </form> <!-- <script src="/src/script/ddragon.js"><\/script> --> ', "  <script>(function(){", '\n    let champions = Object.keys(lolol).map((champion) => {\n        return lolol[champion].name;\n    });\n    let gameOver = false;\n    \n    if (localStorage.getItem("resetTime") == null) {\n        localStorage.setItem("resetTime", resetTime);\n    } else if (localStorage.getItem("resetTime") != resetTime) {\n        const event = new CustomEvent("reset");\n        window.dispatchEvent(event);\n        localStorage.setItem("resetTime", resetTime);\n    }\n\n    const selectionList = [];\n    const storedChampions =\n        JSON.parse(localStorage.getItem(`selectedChampions${mode}`)) || [];\n\n    // Inhalte des inneren Arrays in selectionList \xFCbernehmen\n    selectionList.push(...storedChampions);\n    // Entferne den ausgew\xE4hlten Champion aus dem champions-Array\n    selectionList.forEach((id) => {\n        if (translatorById[id]) {\n            champions.splice(champions.indexOf(translatorById[id].name), 1);\n        }\n    });\n\n    window.addEventListener("reset", (e) => {\n        champions = Object.keys(lolol).map((champion) => {\n            return lolol[champion].name;\n        });\n        selectionList.length = 0;\n        autocomplete(document.getElementById("myInput"), champions);\n        gameOver = false;\n    });\n\n    function autocomplete(inp, arr) {\n        /*the autocomplete function takes two arguments,\n      the text field element and an array of possible autocompleted values:*/\n        var currentFocus;\n\n        /*execute a function when someone writes in the text field:*/\n        inp.addEventListener("input", function (e) {\n            var a,\n                b,\n                i,\n                val = this.value;\n            /*close any already open lists of autocompleted values*/\n            closeAllLists();\n            if (!val) {\n                return false;\n            }\n            currentFocus = -1;\n            /*create a DIV element that will contain the items (values):*/\n            a = document.createElement("DIV");\n            a.setAttribute("id", this.id + "autocomplete-list");\n            a.setAttribute("class", "autocomplete-items");\n            a.classList.add(\n                "bg-gray-800",\n                "rounded-lg",\n                "w-full",\n                "z-10",\n                "max-h-96",\n                "overflow-y-auto",\n                "absolute",\n                "top-10",\n                "left-0",\n                "right-0",\n                "text-gray-300"\n            );\n            /*append the DIV element as a child of the autocomplete container:*/\n            this.parentNode.appendChild(a);\n            /*for each item in the array...*/\n            for (i = 0; i < arr.length; i++) {\n                /*check if the item starts with the same letters as the text field value:*/\n                const normalizedVal = val.toUpperCase();\n                const normalizedItem = arr[i].toUpperCase();\n                const overlyNormalizedItem = arr[i].toUpperCase().replace("\'", "");\n                const hasSpace = arr[i].indexOf(" ") > -1;\n                const matchesStart = normalizedItem.startsWith(normalizedVal) ? true : overlyNormalizedItem.startsWith(normalizedVal);\n                const matchesAfterSpace = hasSpace\n                    ? arr[i]\n                          .slice(arr[i].indexOf(" ") + 1)\n                          .toUpperCase()\n                          .startsWith(normalizedVal)\n                    : false;\n\n                if (matchesStart || matchesAfterSpace) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement("DIV");\n                    b.classList.add(\n                        "flex",\n                        "items-center",\n                        "p-2",\n                        "hover:bg-gray-700",\n                        "focus:bg-gray-700"\n                    );\n                    b.innerHTML = `<img class="mr-2" src="https://ddragon.leagueoflegends.com/cdn/${localStorage.getItem("version") || "15.8.1"}/img/champion/${translatorByName[arr[i]].id}.png" alt="X" width="40" height="40" />`;\n                    /*make the matching letters bold:*/\n                    /* If substring has \', make it bold too */\n                    let p = document.createElement("p")\n                    if (\n                        arr[i].substr(0, val.length).indexOf("\'") > -1 &&\n                        val.indexOf("\'") == -1\n                    ) {\n                        p.innerHTML +=\n                            "<strong>" +\n                            arr[i].substr(0, val.length + 1) +\n                            "</strong>";\n                        p.innerHTML += arr[i].substr(val.length + 1);\n                    } else if (\n                        arr[i].indexOf(" ") > -1\n                            ? arr[i]\n                                  .slice(arr[i].indexOf(" ") + 1)\n                                  .substr(0, val.length)\n                                  .toUpperCase() == val.toUpperCase()\n                            : false\n                    ) {\n                        p.innerHTML += arr[i].substr(\n                            0,\n                            arr[i].indexOf(" ") + 1\n                        );\n                        p.innerHTML +=\n                            "<strong>" +\n                            arr[i].slice(\n                                arr[i].indexOf(" ") + 1,\n                                arr[i].indexOf(" ") + 1 + val.length\n                            );\n                        ("</strong>");\n                        p.innerHTML += arr[i].substr(\n                            arr[i].indexOf(" ") + 1 + val.length\n                        );\n                    } else {\n                        p.innerHTML +=\n                            "<strong>" +\n                            arr[i].substr(0, val.length) +\n                            "</strong>";\n                            p.innerHTML += arr[i].substr(val.length);\n                    }\n                    b.appendChild(p);\n                    /*insert a input field that will hold the current array item\'s value:*/\n                    b.innerHTML += `<input type=\'hidden\' value="${arr[i]}">`;\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener("click", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName("input")[0].value;\n                        /* \xDCberpr\xFCfe, ob der eingegebene Wert in der Champions-Liste enthalten ist: */\n                        if (champions.includes(inp.value)) {\n                            /* Sende das Formular ab: */\n                            setSelection(inp.value);\n                            inp.value = "";\n                            //inp.form.submit();\n                        }\n                        /*close the list of autocompleted values,\n                  (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            }\n        });\n        /*execute a function presses a key on the keyboard:*/\n        inp.addEventListener("keydown", function (e) {\n            var x = document.getElementById(this.id + "autocomplete-list");\n            if (x) x = x.getElementsByTagName("div");\n            if (e.keyCode == 40) {\n                /* Wenn die Pfeil-nach-unten-Taste gedr\xFCckt wird,\n        erh\xF6he die currentFocus-Variable: */\n                currentFocus++;\n                /* und mache das aktuelle Element sichtbarer: */\n                addActive(x);\n            } else if (e.keyCode == 38) {\n                // Pfeil-nach-oben\n                /* Wenn die Pfeil-nach-oben-Taste gedr\xFCckt wird,\n        verringere die currentFocus-Variable: */\n                currentFocus--;\n                /* und mache das aktuelle Element sichtbarer: */\n                addActive(x);\n            } else if (e.keyCode == 13) {\n                /* Wenn die Enter-Taste gedr\xFCckt wird, verhindere das Absenden des Formulars: */\n                e.preventDefault();\n                if (currentFocus > -1) {\n                    /* Simuliere einen Klick auf das "aktive" Element: */\n                    if (x) x[currentFocus].click();\n                } else {\n                    /* Wenn kein Element aktiv ist, w\xE4hle das oberste Element aus: */\n                    if (x && x.length > 0) {\n                        x[0].click();\n                    }\n                }\n            }\n        });\n        function addActive(x) {\n            /*a function to classify an item as "active":*/\n            if (!x) return false;\n            /*start by removing the "active" class on all items:*/\n            removeActive(x);\n            if (currentFocus >= x.length) currentFocus = 0;\n            if (currentFocus < 0) currentFocus = x.length - 1;\n            /*add class "autocomplete-active":*/\n            x[currentFocus].classList.add("autocomplete-active", "bg-gray-700");\n        }\n        function removeActive(x) {\n            /*a function to remove the "active" class from all autocomplete items:*/\n            for (var i = 0; i < x.length; i++) {\n                x[i].classList.remove("autocomplete-active", "bg-gray-700");\n            }\n        }\n        function closeAllLists(elmnt) {\n            /*close all autocomplete lists in the document,\n        except the one passed as an argument:*/\n            var x = document.getElementsByClassName("autocomplete-items");\n            for (var i = 0; i < x.length; i++) {\n                if (elmnt != x[i] && elmnt != inp) {\n                    x[i].parentNode.removeChild(x[i]);\n                }\n            }\n        }\n        /*execute a function when someone clicks in the document:*/\n        document.addEventListener("click", function (e) {\n            closeAllLists(e.target);\n        });\n    }\n\n    /*An array containing all the champion names in the world:*/\n\n    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/\n    autocomplete(document.getElementById("myInput"), champions);\n\n    function setSelection(input) {\n        if (gameOver) {\n            return;\n        }\n        let inputToId = translatorByName[input].id;\n        selectionList.push(inputToId);\n        champions.splice(champions.indexOf(input), 1);\n        localStorage.setItem(\n            `selectedChampions${mode}`,\n            JSON.stringify(selectionList)\n        );\n        // Emit the event\n        window.dispatchEvent(\n            new CustomEvent("championSelected", {\n                detail: inputToId,\n            })\n        );\n    }\n\n    window.addEventListener("gameOver", (e) => {\n        gameOver = true;\n    });\n\n    /* // Listen for events (do this once when the page loads)\n    window.addEventListener("championSelected", (e) => {\n        console.log("Champion selected:", e.detail);\n    }); */\n})();<\/script>'], ["", '<form autocomplete="off" data-astro-cid-dq2priuy> <div class="autocomplete" style="width:300px;" data-astro-cid-dq2priuy> <input id="myInput" type="text" name="Champion" placeholder="Champion Name" data-astro-cid-dq2priuy> </div> </form> <!-- <script src="/src/script/ddragon.js"><\/script> --> ', "  <script>(function(){", '\n    let champions = Object.keys(lolol).map((champion) => {\n        return lolol[champion].name;\n    });\n    let gameOver = false;\n    \n    if (localStorage.getItem("resetTime") == null) {\n        localStorage.setItem("resetTime", resetTime);\n    } else if (localStorage.getItem("resetTime") != resetTime) {\n        const event = new CustomEvent("reset");\n        window.dispatchEvent(event);\n        localStorage.setItem("resetTime", resetTime);\n    }\n\n    const selectionList = [];\n    const storedChampions =\n        JSON.parse(localStorage.getItem(\\`selectedChampions\\${mode}\\`)) || [];\n\n    // Inhalte des inneren Arrays in selectionList \xFCbernehmen\n    selectionList.push(...storedChampions);\n    // Entferne den ausgew\xE4hlten Champion aus dem champions-Array\n    selectionList.forEach((id) => {\n        if (translatorById[id]) {\n            champions.splice(champions.indexOf(translatorById[id].name), 1);\n        }\n    });\n\n    window.addEventListener("reset", (e) => {\n        champions = Object.keys(lolol).map((champion) => {\n            return lolol[champion].name;\n        });\n        selectionList.length = 0;\n        autocomplete(document.getElementById("myInput"), champions);\n        gameOver = false;\n    });\n\n    function autocomplete(inp, arr) {\n        /*the autocomplete function takes two arguments,\n      the text field element and an array of possible autocompleted values:*/\n        var currentFocus;\n\n        /*execute a function when someone writes in the text field:*/\n        inp.addEventListener("input", function (e) {\n            var a,\n                b,\n                i,\n                val = this.value;\n            /*close any already open lists of autocompleted values*/\n            closeAllLists();\n            if (!val) {\n                return false;\n            }\n            currentFocus = -1;\n            /*create a DIV element that will contain the items (values):*/\n            a = document.createElement("DIV");\n            a.setAttribute("id", this.id + "autocomplete-list");\n            a.setAttribute("class", "autocomplete-items");\n            a.classList.add(\n                "bg-gray-800",\n                "rounded-lg",\n                "w-full",\n                "z-10",\n                "max-h-96",\n                "overflow-y-auto",\n                "absolute",\n                "top-10",\n                "left-0",\n                "right-0",\n                "text-gray-300"\n            );\n            /*append the DIV element as a child of the autocomplete container:*/\n            this.parentNode.appendChild(a);\n            /*for each item in the array...*/\n            for (i = 0; i < arr.length; i++) {\n                /*check if the item starts with the same letters as the text field value:*/\n                const normalizedVal = val.toUpperCase();\n                const normalizedItem = arr[i].toUpperCase();\n                const overlyNormalizedItem = arr[i].toUpperCase().replace("\'", "");\n                const hasSpace = arr[i].indexOf(" ") > -1;\n                const matchesStart = normalizedItem.startsWith(normalizedVal) ? true : overlyNormalizedItem.startsWith(normalizedVal);\n                const matchesAfterSpace = hasSpace\n                    ? arr[i]\n                          .slice(arr[i].indexOf(" ") + 1)\n                          .toUpperCase()\n                          .startsWith(normalizedVal)\n                    : false;\n\n                if (matchesStart || matchesAfterSpace) {\n                    /*create a DIV element for each matching element:*/\n                    b = document.createElement("DIV");\n                    b.classList.add(\n                        "flex",\n                        "items-center",\n                        "p-2",\n                        "hover:bg-gray-700",\n                        "focus:bg-gray-700"\n                    );\n                    b.innerHTML = \\`<img class="mr-2" src="https://ddragon.leagueoflegends.com/cdn/\\${localStorage.getItem("version") || "15.8.1"}/img/champion/\\${translatorByName[arr[i]].id}.png" alt="X" width="40" height="40" />\\`;\n                    /*make the matching letters bold:*/\n                    /* If substring has \', make it bold too */\n                    let p = document.createElement("p")\n                    if (\n                        arr[i].substr(0, val.length).indexOf("\'") > -1 &&\n                        val.indexOf("\'") == -1\n                    ) {\n                        p.innerHTML +=\n                            "<strong>" +\n                            arr[i].substr(0, val.length + 1) +\n                            "</strong>";\n                        p.innerHTML += arr[i].substr(val.length + 1);\n                    } else if (\n                        arr[i].indexOf(" ") > -1\n                            ? arr[i]\n                                  .slice(arr[i].indexOf(" ") + 1)\n                                  .substr(0, val.length)\n                                  .toUpperCase() == val.toUpperCase()\n                            : false\n                    ) {\n                        p.innerHTML += arr[i].substr(\n                            0,\n                            arr[i].indexOf(" ") + 1\n                        );\n                        p.innerHTML +=\n                            "<strong>" +\n                            arr[i].slice(\n                                arr[i].indexOf(" ") + 1,\n                                arr[i].indexOf(" ") + 1 + val.length\n                            );\n                        ("</strong>");\n                        p.innerHTML += arr[i].substr(\n                            arr[i].indexOf(" ") + 1 + val.length\n                        );\n                    } else {\n                        p.innerHTML +=\n                            "<strong>" +\n                            arr[i].substr(0, val.length) +\n                            "</strong>";\n                            p.innerHTML += arr[i].substr(val.length);\n                    }\n                    b.appendChild(p);\n                    /*insert a input field that will hold the current array item\'s value:*/\n                    b.innerHTML += \\`<input type=\'hidden\' value="\\${arr[i]}">\\`;\n                    /*execute a function when someone clicks on the item value (DIV element):*/\n                    b.addEventListener("click", function (e) {\n                        /*insert the value for the autocomplete text field:*/\n                        inp.value = this.getElementsByTagName("input")[0].value;\n                        /* \xDCberpr\xFCfe, ob der eingegebene Wert in der Champions-Liste enthalten ist: */\n                        if (champions.includes(inp.value)) {\n                            /* Sende das Formular ab: */\n                            setSelection(inp.value);\n                            inp.value = "";\n                            //inp.form.submit();\n                        }\n                        /*close the list of autocompleted values,\n                  (or any other open lists of autocompleted values:*/\n                        closeAllLists();\n                    });\n                    a.appendChild(b);\n                }\n            }\n        });\n        /*execute a function presses a key on the keyboard:*/\n        inp.addEventListener("keydown", function (e) {\n            var x = document.getElementById(this.id + "autocomplete-list");\n            if (x) x = x.getElementsByTagName("div");\n            if (e.keyCode == 40) {\n                /* Wenn die Pfeil-nach-unten-Taste gedr\xFCckt wird,\n        erh\xF6he die currentFocus-Variable: */\n                currentFocus++;\n                /* und mache das aktuelle Element sichtbarer: */\n                addActive(x);\n            } else if (e.keyCode == 38) {\n                // Pfeil-nach-oben\n                /* Wenn die Pfeil-nach-oben-Taste gedr\xFCckt wird,\n        verringere die currentFocus-Variable: */\n                currentFocus--;\n                /* und mache das aktuelle Element sichtbarer: */\n                addActive(x);\n            } else if (e.keyCode == 13) {\n                /* Wenn die Enter-Taste gedr\xFCckt wird, verhindere das Absenden des Formulars: */\n                e.preventDefault();\n                if (currentFocus > -1) {\n                    /* Simuliere einen Klick auf das "aktive" Element: */\n                    if (x) x[currentFocus].click();\n                } else {\n                    /* Wenn kein Element aktiv ist, w\xE4hle das oberste Element aus: */\n                    if (x && x.length > 0) {\n                        x[0].click();\n                    }\n                }\n            }\n        });\n        function addActive(x) {\n            /*a function to classify an item as "active":*/\n            if (!x) return false;\n            /*start by removing the "active" class on all items:*/\n            removeActive(x);\n            if (currentFocus >= x.length) currentFocus = 0;\n            if (currentFocus < 0) currentFocus = x.length - 1;\n            /*add class "autocomplete-active":*/\n            x[currentFocus].classList.add("autocomplete-active", "bg-gray-700");\n        }\n        function removeActive(x) {\n            /*a function to remove the "active" class from all autocomplete items:*/\n            for (var i = 0; i < x.length; i++) {\n                x[i].classList.remove("autocomplete-active", "bg-gray-700");\n            }\n        }\n        function closeAllLists(elmnt) {\n            /*close all autocomplete lists in the document,\n        except the one passed as an argument:*/\n            var x = document.getElementsByClassName("autocomplete-items");\n            for (var i = 0; i < x.length; i++) {\n                if (elmnt != x[i] && elmnt != inp) {\n                    x[i].parentNode.removeChild(x[i]);\n                }\n            }\n        }\n        /*execute a function when someone clicks in the document:*/\n        document.addEventListener("click", function (e) {\n            closeAllLists(e.target);\n        });\n    }\n\n    /*An array containing all the champion names in the world:*/\n\n    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/\n    autocomplete(document.getElementById("myInput"), champions);\n\n    function setSelection(input) {\n        if (gameOver) {\n            return;\n        }\n        let inputToId = translatorByName[input].id;\n        selectionList.push(inputToId);\n        champions.splice(champions.indexOf(input), 1);\n        localStorage.setItem(\n            \\`selectedChampions\\${mode}\\`,\n            JSON.stringify(selectionList)\n        );\n        // Emit the event\n        window.dispatchEvent(\n            new CustomEvent("championSelected", {\n                detail: inputToId,\n            })\n        );\n    }\n\n    window.addEventListener("gameOver", (e) => {\n        gameOver = true;\n    });\n\n    /* // Listen for events (do this once when the page loads)\n    window.addEventListener("championSelected", (e) => {\n        console.log("Champion selected:", e.detail);\n    }); */\n})();<\/script>'])), maybeRenderHead(), renderScript($$result, "C:/Users/jonas/OneDrive - bwedu/Loldle/src/components/champSelect.astro?astro&type=script&index=0&lang.ts"), defineScriptVars({ lolol, translatorByName, translatorById, mode, resetTime }));
}, "C:/Users/jonas/OneDrive - bwedu/Loldle/src/components/champSelect.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$ClassicGuess = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$ClassicGuess;
  const { champions } = Astro2.props;
  let lolol = champions.data;
  const randomChamp = champions.answer;
  return renderTemplate(_a || (_a = __template(["", '<ul class="my-8"> <!-- <li class="grid grid-rows-1 grid-cols-8 gap-1">\n\n        <div class="flex justify-center items-center aspect-square border-2">\n            <img\n                src="https://ddragon.leagueoflegends.com/cdn/15.8.1/img/champion/Aatrox.png"\n                alt="Aatrox"\n            />\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Male\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-red-500"\n        >\n            Jungle\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Marksman\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Mana\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Range\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Shurima\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-gradient-to-b from-green-500 to-red-500"\n        >\n            2012\n        </div>\n    </li> --> </ul> <ul id="answerHolder" class="flex flex-col-reverse gap-4"></ul> <p class="text-white">LOL <strong>hol</strong></p> <script>(function(){', '\n    const grade = {\n        Good: "Good",\n        Bad: "Bad",\n        Meh: "Meh",\n        Higher: "Higher",\n        Lower: "Lower",\n    };\n\n    const answerHolder = document.getElementById("answerHolder");\n    const version = localStorage.getItem("version") || "15.8.1";\n    const gameOverEvent = new CustomEvent("gameOver", {\n        detail: { result: "win" },\n    });\n    window.addEventListener("championSelected", (e) => {\n        addAnswer(lolol[e.detail]);\n        if (e.detail === randomChamp.id) {\n            window.dispatchEvent(gameOverEvent);\n        }\n    });\n    window.addEventListener("reset", (e) => {\n        console.log("reset event triggered");\n        resetGame();\n    });\n\n\n\n    const savedAnswers =\n        JSON.parse(localStorage.getItem("selectedChampionsClassic")) || [];\n\n    // User has already played the game\n    if (savedAnswers[savedAnswers.length - 1] === randomChamp.id) {\n        window.dispatchEvent(gameOverEvent);\n    }\n    \n\n    savedAnswers.forEach((champ) => {\n        addAnswer(lolol[champ]);\n    });\n\n    function addAnswer(champ) {\n        const result = checkAnswer(champ);\n\n        const li = document.createElement("li");\n        li.classList.add("grid", "grid-rows-1", "grid-cols-8", "gap-1");\n        li.innerHTML = `\n        <div class="flex justify-center items-center aspect-square">\n        <img src="https://ddragon.leagueoflegends.com/cdn/${version}/img/champion/${champ.id}.png" alt="${champ.name}"/>\n        </div>\n        `;\n        answerHolder.appendChild(li);\n\n        li.appendChild(printDiv(champ.gender, result.gender));\n        li.appendChild(printDiv(champ.lane, result.lane));\n        li.appendChild(printDiv(champ.species, result.species));\n        li.appendChild(printDiv(champ.resource, result.resource));\n        li.appendChild(printDiv(champ.attackType, result.attackType));\n        li.appendChild(printDiv(champ.region, result.region));\n        li.appendChild(printDiv(champ.releaseDate, result.releaseDate));\n    }\n\n    function printDiv(content, res) {\n        let element = document.createElement("DIV");\n        element.classList.add(\n            "flex",\n            "justify-center",\n            "items-center",\n            "aspect-square",\n            "border-2"\n        );\n        element.innerHTML = content;\n        if (res === grade.Good) {\n            element.classList.add("bg-green-500");\n        } else if (res === grade.Bad) {\n            element.classList.add("bg-red-500");\n        } else if (res === grade.Meh) {\n            element.classList.add("bg-yellow-500");\n        } else if (res === grade.Higher) {\n            element.classList.add(\n                "bg-gradient-to-b",\n                "from-green-500",\n                "to-red-500"\n            );\n        } else if (res === grade.Lower) {\n            element.classList.add(\n                "bg-gradient-to-b",\n                "from-red-500",\n                "to-green-500"\n            );\n        }\n        return element;\n    }\n\n    function checkAnswer(champ) {\n        let result = {};\n\n        result["gender"] = trueFalse(champ.gender, randomChamp.gender);\n        result["lane"] = trueFalseMeh(champ.lane, randomChamp.lane);\n        result["species"] = trueFalseMeh(champ.species, randomChamp.species);\n        result["resource"] = trueFalse(champ.resource, randomChamp.resource);\n        result["attackType"] = trueFalse(\n            champ.attackType,\n            randomChamp.attackType\n        );\n        result["region"] = trueFalseMeh(champ.region, randomChamp.region);\n        result["releaseDate"] = higherLower(\n            champ.releaseDate,\n            randomChamp.releaseDate\n        );\n        return result;\n    }\n\n    function trueFalseMeh(x, y) {\n        if (JSON.stringify(x) === JSON.stringify(y)) return grade.Good;\n        if (y.some((r) => x.includes(r))) return grade.Meh;\n        return grade.Bad;\n    }\n    function trueFalse(x, y) {\n        return x === y ? grade.Good : grade.Bad;\n    }\n    function higherLower(x, y) {\n        return x === y ? grade.Good : y > x ? grade.Higher : grade.Lower;\n    }\n\n    function resetGame() {\n        answerHolder.innerHTML = "";\n    }\n})();<\/script>'], ["", '<ul class="my-8"> <!-- <li class="grid grid-rows-1 grid-cols-8 gap-1">\n\n        <div class="flex justify-center items-center aspect-square border-2">\n            <img\n                src="https://ddragon.leagueoflegends.com/cdn/15.8.1/img/champion/Aatrox.png"\n                alt="Aatrox"\n            />\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Male\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-red-500"\n        >\n            Jungle\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Marksman\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Mana\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Range\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-green-500"\n        >\n            Shurima\n        </div>\n        <div\n            class="flex justify-center items-center aspect-square border-2 bg-gradient-to-b from-green-500 to-red-500"\n        >\n            2012\n        </div>\n    </li> --> </ul> <ul id="answerHolder" class="flex flex-col-reverse gap-4"></ul> <p class="text-white">LOL <strong>hol</strong></p> <script>(function(){', '\n    const grade = {\n        Good: "Good",\n        Bad: "Bad",\n        Meh: "Meh",\n        Higher: "Higher",\n        Lower: "Lower",\n    };\n\n    const answerHolder = document.getElementById("answerHolder");\n    const version = localStorage.getItem("version") || "15.8.1";\n    const gameOverEvent = new CustomEvent("gameOver", {\n        detail: { result: "win" },\n    });\n    window.addEventListener("championSelected", (e) => {\n        addAnswer(lolol[e.detail]);\n        if (e.detail === randomChamp.id) {\n            window.dispatchEvent(gameOverEvent);\n        }\n    });\n    window.addEventListener("reset", (e) => {\n        console.log("reset event triggered");\n        resetGame();\n    });\n\n\n\n    const savedAnswers =\n        JSON.parse(localStorage.getItem("selectedChampionsClassic")) || [];\n\n    // User has already played the game\n    if (savedAnswers[savedAnswers.length - 1] === randomChamp.id) {\n        window.dispatchEvent(gameOverEvent);\n    }\n    \n\n    savedAnswers.forEach((champ) => {\n        addAnswer(lolol[champ]);\n    });\n\n    function addAnswer(champ) {\n        const result = checkAnswer(champ);\n\n        const li = document.createElement("li");\n        li.classList.add("grid", "grid-rows-1", "grid-cols-8", "gap-1");\n        li.innerHTML = \\`\n        <div class="flex justify-center items-center aspect-square">\n        <img src="https://ddragon.leagueoflegends.com/cdn/\\${version}/img/champion/\\${champ.id}.png" alt="\\${champ.name}"/>\n        </div>\n        \\`;\n        answerHolder.appendChild(li);\n\n        li.appendChild(printDiv(champ.gender, result.gender));\n        li.appendChild(printDiv(champ.lane, result.lane));\n        li.appendChild(printDiv(champ.species, result.species));\n        li.appendChild(printDiv(champ.resource, result.resource));\n        li.appendChild(printDiv(champ.attackType, result.attackType));\n        li.appendChild(printDiv(champ.region, result.region));\n        li.appendChild(printDiv(champ.releaseDate, result.releaseDate));\n    }\n\n    function printDiv(content, res) {\n        let element = document.createElement("DIV");\n        element.classList.add(\n            "flex",\n            "justify-center",\n            "items-center",\n            "aspect-square",\n            "border-2"\n        );\n        element.innerHTML = content;\n        if (res === grade.Good) {\n            element.classList.add("bg-green-500");\n        } else if (res === grade.Bad) {\n            element.classList.add("bg-red-500");\n        } else if (res === grade.Meh) {\n            element.classList.add("bg-yellow-500");\n        } else if (res === grade.Higher) {\n            element.classList.add(\n                "bg-gradient-to-b",\n                "from-green-500",\n                "to-red-500"\n            );\n        } else if (res === grade.Lower) {\n            element.classList.add(\n                "bg-gradient-to-b",\n                "from-red-500",\n                "to-green-500"\n            );\n        }\n        return element;\n    }\n\n    function checkAnswer(champ) {\n        let result = {};\n\n        result["gender"] = trueFalse(champ.gender, randomChamp.gender);\n        result["lane"] = trueFalseMeh(champ.lane, randomChamp.lane);\n        result["species"] = trueFalseMeh(champ.species, randomChamp.species);\n        result["resource"] = trueFalse(champ.resource, randomChamp.resource);\n        result["attackType"] = trueFalse(\n            champ.attackType,\n            randomChamp.attackType\n        );\n        result["region"] = trueFalseMeh(champ.region, randomChamp.region);\n        result["releaseDate"] = higherLower(\n            champ.releaseDate,\n            randomChamp.releaseDate\n        );\n        return result;\n    }\n\n    function trueFalseMeh(x, y) {\n        if (JSON.stringify(x) === JSON.stringify(y)) return grade.Good;\n        if (y.some((r) => x.includes(r))) return grade.Meh;\n        return grade.Bad;\n    }\n    function trueFalse(x, y) {\n        return x === y ? grade.Good : grade.Bad;\n    }\n    function higherLower(x, y) {\n        return x === y ? grade.Good : y > x ? grade.Higher : grade.Lower;\n    }\n\n    function resetGame() {\n        answerHolder.innerHTML = "";\n    }\n})();<\/script>'])), maybeRenderHead(), defineScriptVars({ lolol, translatorByName, translatorById, randomChamp }));
}, "C:/Users/jonas/OneDrive - bwedu/Loldle/src/components/classicGuess.astro", void 0);

const $$Reset = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${maybeRenderHead()}<button id="Reset" class="text-gray-300 cursor-pointer">Reset</button> ${renderScript($$result, "C:/Users/jonas/OneDrive - bwedu/Loldle/src/components/reset.astro?astro&type=script&index=0&lang.ts")}`;
}, "C:/Users/jonas/OneDrive - bwedu/Loldle/src/components/reset.astro", void 0);

const prerender = false;
const $$Classic = createComponent(async ($$result, $$props, $$slots) => {
  const championFetcher = new Champions("15.8.1");
  const champions = await championFetcher.parse();
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Classic Boldle" }, { "default": async ($$result2) => renderTemplate` ${renderComponent($$result2, "MainContainer", $$MainContainer, {}, { "default": async ($$result3) => renderTemplate` ${renderComponent($$result3, "ChampSelect", $$ChampSelect, { "champions": champions, "mode": "Classic" })} ${renderComponent($$result3, "ClassicGuess", $$ClassicGuess, { "champions": champions })} ${renderComponent($$result3, "Reset", $$Reset, {})} ` })} ` })}`;
}, "C:/Users/jonas/OneDrive - bwedu/Loldle/src/pages/classic.astro", void 0);

const $$file = "C:/Users/jonas/OneDrive - bwedu/Loldle/src/pages/classic.astro";
const $$url = "/classic";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$Classic,
    file: $$file,
    prerender,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
